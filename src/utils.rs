use polars::prelude::*;
use polars_arrow::array::{Array, MutablePlString};

pub(crate) fn apply_to_buffer_with_builder<'a, T, F>(ca: &'a ChunkedArray<T>, mut f: F) -> StringChunked
where
    T: PolarsDataType,
    F: FnMut(T::Physical<'a>, &mut String),
{
    let mut buf = String::new();
    let chunks = ca
        .downcast_iter()
        .map(|arr| {
            let mut mutarr = MutablePlString::with_capacity(arr.len());
            arr.iter().for_each(|opt| {
                match opt {
                    None => mutarr.push_null(),
                    Some(v) => {
                        buf.clear();
                        f(v, &mut buf);
                        mutarr.push_value(&buf)
                    },
                }
            });
            mutarr.freeze()
        })
        .collect::<Vec<_>>();
    ChunkedArray::from_chunk_iter(ca.name(), chunks)
}
