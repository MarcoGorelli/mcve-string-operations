import timeit
import numpy as np

setup = """
import polars as pl
import random
import string
from my_plugin import (
    it_slices_apply_values_owned,
    it_slices_apply_values_borrowed,
    it_slices_apply_to_buffer,
    it_slices_apply_to_buffer_with_builder,
)

size = 100_000
data = []
for _ in range(size):
    data.append(''.join(random.choices(string.ascii_letters, k=10)))

df = pl.DataFrame({'a': data})
"""
results = np.array(timeit.Timer(
    stmt="df.select(it_slices_apply_values_owned('a'))",
    setup=setup,
    )
    .repeat(7, 3)
)/3
print(f"min: {min(results)}")
print(f"{np.mean(results)} +/- {np.std(results)/np.sqrt(len(results))}")

results = np.array(timeit.Timer(
    stmt="df.select(it_slices_apply_values_borrowed('a'))",
    setup=setup,
    )
    .repeat(7, 3)
)/3
print(f"min: {min(results)}")
print(f"{np.mean(results)} +/- {np.std(results)/np.sqrt(len(results))}")

results = np.array(timeit.Timer(
    stmt="df.select(it_slices_apply_to_buffer('a'))",
    setup=setup,
    )
    .repeat(7, 3)
)/3
print(f"min: {min(results)}")
print(f"{np.mean(results)} +/- {np.std(results)/np.sqrt(len(results))}")

results = np.array(timeit.Timer(
    stmt="df.select(it_slices_apply_to_buffer_with_builder('a'))",
    setup=setup,
    )
    .repeat(7, 3)
)/3
print(f"min: {min(results)}")
print(f"{np.mean(results)} +/- {np.std(results)/np.sqrt(len(results))}")
