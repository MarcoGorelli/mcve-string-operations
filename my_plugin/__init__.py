from __future__ import annotations

from pathlib import Path
from typing import TYPE_CHECKING

import polars as pl

from my_plugin._internal import __version__
from my_plugin.utils import parse_into_expr, register_plugin, parse_version

if TYPE_CHECKING:
    from polars.type_aliases import IntoExpr

if parse_version(pl.__version__) < parse_version("0.20.16"):
    from polars.utils.udfs import _get_shared_lib_location

    lib: str | Path = _get_shared_lib_location(__file__)
else:
    lib = Path(__file__).parent

def pig_latinnify_allocating(values: IntoExpr) -> pl.Expr:
    return register_plugin(
        args=[values],
        lib=lib,
        symbol="pig_latinnify_allocating",
        is_elementwise=True,
    )
def pig_latinnify_amortized(values: IntoExpr) -> pl.Expr:
    return register_plugin(
        args=[values],
        lib=lib,
        symbol="pig_latinnify_amortized",
        is_elementwise=True,
    )

def pig_latinnify_with_builder(values: IntoExpr) -> pl.Expr:
    return register_plugin(
        args=[values],
        lib=lib,
        symbol="pig_latinnify_with_builder",
        is_elementwise=True,
    )

def numeric_op_allocating(values: IntoExpr) -> pl.Expr:
    return register_plugin(
        args=[values],
        lib=lib,
        symbol="numeric_op_allocating",
        is_elementwise=True,
    )

def numeric_op_with_builder(values: IntoExpr) -> pl.Expr:
    return register_plugin(
        args=[values],
        lib=lib,
        symbol="numeric_op_with_builder",
        is_elementwise=True,
    )

def slicing_op_with_builder(values: IntoExpr) -> pl.Expr:
    return register_plugin(
        args=[values],
        lib=lib,
        symbol="slicing_op_with_builder",
        is_elementwise=True,
    )

def slicing_op_with_unary(values: IntoExpr) -> pl.Expr:
    return register_plugin(
        args=[values],
        lib=lib,
        symbol="slicing_op_with_unary",
        is_elementwise=True,
    )

def slicing_op_apply_values(values: IntoExpr) -> pl.Expr:
    return register_plugin(
        args=[values],
        lib=lib,
        symbol="slicing_op_apply_values",
        is_elementwise=True,
    )

